# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/BatMeth
pkgincludedir = $(includedir)/BatMeth
pkglibdir = $(libdir)/BatMeth
pkglibexecdir = $(libexecdir)/BatMeth
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = batmethindex$(EXEEXT) penguin$(EXEEXT) \
	penguin-a$(EXEEXT) bwtformatdb$(EXEEXT) reverse$(EXEEXT) \
	filter$(EXEEXT) methyGff$(EXEEXT) build_index_rrbs$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libz_a_AR = $(AR) $(ARFLAGS)
libz_a_LIBADD =
am_libz_a_OBJECTS = adler32.$(OBJEXT) compress.$(OBJEXT) \
	crc32.$(OBJEXT) gzio.$(OBJEXT) uncompr.$(OBJEXT) \
	deflate.$(OBJEXT) trees.$(OBJEXT) zutil.$(OBJEXT) \
	inflate.$(OBJEXT) infback.$(OBJEXT) inftrees.$(OBJEXT) \
	inffast.$(OBJEXT)
libz_a_OBJECTS = $(am_libz_a_OBJECTS)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_batmethindex_OBJECTS = bfix.$(OBJEXT) index.$(OBJEXT) BWT.$(OBJEXT) \
	MiscUtilities.$(OBJEXT) MemManager.$(OBJEXT) \
	TextConverter.$(OBJEXT) r250.$(OBJEXT) QSufSort.$(OBJEXT) \
	iniparser.$(OBJEXT) inistrlib.$(OBJEXT) dictionary.$(OBJEXT) \
	DNACount.$(OBJEXT) Timing.$(OBJEXT) Socket.$(OBJEXT) \
	HSP.$(OBJEXT) HSPstatistic.$(OBJEXT) karlin.$(OBJEXT)
batmethindex_OBJECTS = $(am_batmethindex_OBJECTS)
batmethindex_LDADD = $(LDADD)
am_build_index_rrbs_OBJECTS = build_index_rrbs.$(OBJEXT)
build_index_rrbs_OBJECTS = $(am_build_index_rrbs_OBJECTS)
build_index_rrbs_LDADD = $(LDADD)
am_bwtformatdb_OBJECTS = bwtformatdb.$(OBJEXT) BWT.$(OBJEXT) \
	BWTConstruct.$(OBJEXT) MiscUtilities.$(OBJEXT) \
	MemManager.$(OBJEXT) TextConverter.$(OBJEXT) r250.$(OBJEXT) \
	QSufSort.$(OBJEXT) iniparser.$(OBJEXT) inistrlib.$(OBJEXT) \
	dictionary.$(OBJEXT) DNACount.$(OBJEXT) Timing.$(OBJEXT) \
	Socket.$(OBJEXT) HSP.$(OBJEXT) HSPstatistic.$(OBJEXT) \
	karlin.$(OBJEXT)
bwtformatdb_OBJECTS = $(am_bwtformatdb_OBJECTS)
bwtformatdb_LDADD = $(LDADD)
am_filter_OBJECTS = filter.$(OBJEXT)
filter_OBJECTS = $(am_filter_OBJECTS)
filter_LDADD = $(LDADD)
am_methyGff_OBJECTS = methyGff.$(OBJEXT)
methyGff_OBJECTS = $(am_methyGff_OBJECTS)
methyGff_LDADD = $(LDADD)
am_penguin_OBJECTS = print.$(OBJEXT) filters.$(OBJEXT) utils.$(OBJEXT) \
	batlib.$(OBJEXT) rqindex.$(OBJEXT) penguin.$(OBJEXT) \
	map.$(OBJEXT) bfix.$(OBJEXT) BWT.$(OBJEXT) \
	MiscUtilities.$(OBJEXT) MemManager.$(OBJEXT) \
	TextConverter.$(OBJEXT) r250.$(OBJEXT) QSufSort.$(OBJEXT) \
	ssw.$(OBJEXT) command.$(OBJEXT) swroutines.$(OBJEXT) \
	iniparser.$(OBJEXT) inistrlib.$(OBJEXT) dictionary.$(OBJEXT) \
	DNACount.$(OBJEXT) Timing.$(OBJEXT) Socket.$(OBJEXT) \
	HSP.$(OBJEXT) HSPstatistic.$(OBJEXT) karlin.$(OBJEXT) \
	fastsw.$(OBJEXT)
penguin_OBJECTS = $(am_penguin_OBJECTS)
penguin_LDADD = $(LDADD)
am_penguin_a_OBJECTS = print.$(OBJEXT) filters.$(OBJEXT) \
	utils.$(OBJEXT) batlib.$(OBJEXT) rqindex.$(OBJEXT) \
	penguin-a.$(OBJEXT) map.$(OBJEXT) bfix.$(OBJEXT) BWT.$(OBJEXT) \
	MiscUtilities.$(OBJEXT) MemManager.$(OBJEXT) \
	TextConverter.$(OBJEXT) r250.$(OBJEXT) QSufSort.$(OBJEXT) \
	ssw.$(OBJEXT) command.$(OBJEXT) swroutines.$(OBJEXT) \
	iniparser.$(OBJEXT) inistrlib.$(OBJEXT) dictionary.$(OBJEXT) \
	DNACount.$(OBJEXT) Timing.$(OBJEXT) Socket.$(OBJEXT) \
	HSP.$(OBJEXT) HSPstatistic.$(OBJEXT) karlin.$(OBJEXT) \
	fastsw.$(OBJEXT)
penguin_a_OBJECTS = $(am_penguin_a_OBJECTS)
penguin_a_LDADD = $(LDADD)
am_reverse_OBJECTS = reverse.$(OBJEXT)
reverse_OBJECTS = $(am_reverse_OBJECTS)
reverse_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libz_a_SOURCES) $(batmethindex_SOURCES) \
	$(build_index_rrbs_SOURCES) $(bwtformatdb_SOURCES) \
	$(filter_SOURCES) $(methyGff_SOURCES) $(penguin_SOURCES) \
	$(penguin_a_SOURCES) $(reverse_SOURCES)
DIST_SOURCES = $(libz_a_SOURCES) $(batmethindex_SOURCES) \
	$(build_index_rrbs_SOURCES) $(bwtformatdb_SOURCES) \
	$(filter_SOURCES) $(methyGff_SOURCES) $(penguin_SOURCES) \
	$(penguin_a_SOURCES) $(reverse_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run aclocal-1.11
AMTAR = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run tar
AUTOCONF = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run autoconf
AUTOHEADER = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run autoheader
AUTOMAKE = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -I/public/home/qwzhou/software/packagesR/include
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -L/public/home/qwzhou/software/packagesR/lib
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = BatMeth
PACKAGE_BUGREPORT = qiangwei.zhou2013@gmail.com
PACKAGE_NAME = BatMeth
PACKAGE_STRING = BatMeth 2.00(mmx)
PACKAGE_TARNAME = batmeth
PACKAGE_URL = 
PACKAGE_VERSION = 2.00(mmx)
PATH_SEPARATOR = :
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 2.00_mmx
abs_builddir = /public/home/qwzhou/software_devp/batmeth2/src
abs_srcdir = /public/home/qwzhou/software_devp/batmeth2/src
abs_top_builddir = /public/home/qwzhou/software_devp/batmeth2
abs_top_srcdir = /public/home/qwzhou/software_devp/batmeth2
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /public/home/qwzhou/software_devp/batmeth2/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
EXTRA_DIST = batmeth2
AM_CFLAGS = -w -O3 -funroll-loops -maccumulate-outgoing-args -msse2 -lz -lm -pthread 
AM_CXXFLAGS = -w -O3 -funroll-loops -maccumulate-outgoing-args -msse2 -lz -lm -pthread 
RANLIB = ranlib
#AM_CPPFLAGS = -O3 -funroll-loops -maccumulate-outgoing-args -msse2 -lm
noinst_LIBRARIES = libz.a
libz_a_SOURCES = adler32.c compress.c crc32.c gzio.c uncompr.c deflate.c trees.c \
       zutil.c inflate.c infback.c inftrees.c inffast.c\
       zlib.h zconf.h crc32.h  deflate.h zutil.h inftrees.h inflate.h inffast.h trees.h inffixed.h

batmethindex_SOURCES = bfix.cpp index.cpp BWT.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c\
 iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c\
 BWT.h TypeNLimit.h MemManager.h TextConverter.h HSP.h MiscUtilities.h DNACount.h r250.h HSPstatistic.h\
 BWTConstruct.h QSufSort.h r250.h dictionary.h inistrlib.h iniparser.h Timing.h Socket.h karlin.h\
 bfix.h 

penguin_SOURCES = print.cpp filters.cpp utils.cpp batlib.cpp rqindex.cpp penguin.cpp map.cpp ssw.h command.h global.h swroutines.h kseq.h\
 bfix.cpp BWT.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c ssw.c command.cpp swroutines.cpp\
 iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c fastsw.cpp\
 print.h filters.h BWT.h TypeNLimit.h MemManager.h TextConverter.h HSP.h MiscUtilities.h DNACount.h r250.h HSPstatistic.h\
 BWTConstruct.h QSufSort.h r250.h dictionary.h inistrlib.h iniparser.h Timing.h Socket.h karlin.h\
 bfix.h rqindex.h utils.h batlib.h common.h map.h fastsw.h

penguin_a_SOURCES = print.cpp filters.cpp utils.cpp batlib.cpp rqindex.cpp penguin-a.cpp map.cpp ssw.h command.h global.h swroutines.h kseq.h\
 bfix.cpp BWT.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c ssw.c command.cpp swroutines.cpp\
 iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c fastsw.cpp\
 print.h filters.h BWT.h TypeNLimit.h MemManager.h TextConverter.h HSP.h MiscUtilities.h DNACount.h r250.h HSPstatistic.h\
 BWTConstruct.h QSufSort.h r250.h dictionary.h inistrlib.h iniparser.h Timing.h Socket.h karlin.h\
 bfix.h rqindex.h utils.h batlib.h common.h map.h fastsw.h

bwtformatdb_SOURCES = bwtformatdb.c BWT.c BWTConstruct.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c\
 iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c\
 BWT.h TypeNLimit.h MemManager.h TextConverter.h HSP.h MiscUtilities.h DNACount.h r250.h HSPstatistic.h\
 BWTConstruct.h QSufSort.h r250.h dictionary.h inistrlib.h iniparser.h Timing.h Socket.h karlin.h

reverse_SOURCES = reverse.cpp 
filter_SOURCES = filter.cpp 
methyGff_SOURCES = methyGff.cpp
build_index_rrbs_SOURCES = build_index_rrbs.cpp
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libz.a: $(libz_a_OBJECTS) $(libz_a_DEPENDENCIES) 
	-rm -f libz.a
	$(libz_a_AR) libz.a $(libz_a_OBJECTS) $(libz_a_LIBADD)
	$(RANLIB) libz.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
batmethindex$(EXEEXT): $(batmethindex_OBJECTS) $(batmethindex_DEPENDENCIES) 
	@rm -f batmethindex$(EXEEXT)
	$(CXXLINK) $(batmethindex_OBJECTS) $(batmethindex_LDADD) $(LIBS)
build_index_rrbs$(EXEEXT): $(build_index_rrbs_OBJECTS) $(build_index_rrbs_DEPENDENCIES) 
	@rm -f build_index_rrbs$(EXEEXT)
	$(CXXLINK) $(build_index_rrbs_OBJECTS) $(build_index_rrbs_LDADD) $(LIBS)
bwtformatdb$(EXEEXT): $(bwtformatdb_OBJECTS) $(bwtformatdb_DEPENDENCIES) 
	@rm -f bwtformatdb$(EXEEXT)
	$(LINK) $(bwtformatdb_OBJECTS) $(bwtformatdb_LDADD) $(LIBS)
filter$(EXEEXT): $(filter_OBJECTS) $(filter_DEPENDENCIES) 
	@rm -f filter$(EXEEXT)
	$(CXXLINK) $(filter_OBJECTS) $(filter_LDADD) $(LIBS)
methyGff$(EXEEXT): $(methyGff_OBJECTS) $(methyGff_DEPENDENCIES) 
	@rm -f methyGff$(EXEEXT)
	$(CXXLINK) $(methyGff_OBJECTS) $(methyGff_LDADD) $(LIBS)
penguin$(EXEEXT): $(penguin_OBJECTS) $(penguin_DEPENDENCIES) 
	@rm -f penguin$(EXEEXT)
	$(CXXLINK) $(penguin_OBJECTS) $(penguin_LDADD) $(LIBS)
penguin-a$(EXEEXT): $(penguin_a_OBJECTS) $(penguin_a_DEPENDENCIES) 
	@rm -f penguin-a$(EXEEXT)
	$(CXXLINK) $(penguin_a_OBJECTS) $(penguin_a_LDADD) $(LIBS)
reverse$(EXEEXT): $(reverse_OBJECTS) $(reverse_DEPENDENCIES) 
	@rm -f reverse$(EXEEXT)
	$(CXXLINK) $(reverse_OBJECTS) $(reverse_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/BWT.Po
include ./$(DEPDIR)/BWTConstruct.Po
include ./$(DEPDIR)/DNACount.Po
include ./$(DEPDIR)/HSP.Po
include ./$(DEPDIR)/HSPstatistic.Po
include ./$(DEPDIR)/MemManager.Po
include ./$(DEPDIR)/MiscUtilities.Po
include ./$(DEPDIR)/QSufSort.Po
include ./$(DEPDIR)/Socket.Po
include ./$(DEPDIR)/TextConverter.Po
include ./$(DEPDIR)/Timing.Po
include ./$(DEPDIR)/adler32.Po
include ./$(DEPDIR)/batlib.Po
include ./$(DEPDIR)/bfix.Po
include ./$(DEPDIR)/build_index_rrbs.Po
include ./$(DEPDIR)/bwtformatdb.Po
include ./$(DEPDIR)/command.Po
include ./$(DEPDIR)/compress.Po
include ./$(DEPDIR)/crc32.Po
include ./$(DEPDIR)/deflate.Po
include ./$(DEPDIR)/dictionary.Po
include ./$(DEPDIR)/fastsw.Po
include ./$(DEPDIR)/filter.Po
include ./$(DEPDIR)/filters.Po
include ./$(DEPDIR)/gzio.Po
include ./$(DEPDIR)/index.Po
include ./$(DEPDIR)/infback.Po
include ./$(DEPDIR)/inffast.Po
include ./$(DEPDIR)/inflate.Po
include ./$(DEPDIR)/inftrees.Po
include ./$(DEPDIR)/iniparser.Po
include ./$(DEPDIR)/inistrlib.Po
include ./$(DEPDIR)/karlin.Po
include ./$(DEPDIR)/map.Po
include ./$(DEPDIR)/methyGff.Po
include ./$(DEPDIR)/penguin-a.Po
include ./$(DEPDIR)/penguin.Po
include ./$(DEPDIR)/print.Po
include ./$(DEPDIR)/r250.Po
include ./$(DEPDIR)/reverse.Po
include ./$(DEPDIR)/rqindex.Po
include ./$(DEPDIR)/ssw.Po
include ./$(DEPDIR)/swroutines.Po
include ./$(DEPDIR)/trees.Po
include ./$(DEPDIR)/uncompr.Po
include ./$(DEPDIR)/utils.Po
include ./$(DEPDIR)/zutil.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-noinstLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-noinstLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS

#batman_SOURCES= batman.cpp BWT.c BWTConstruct.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c\
# iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c 
#batman_LDADD = libz.a
#decode_SOURCES= decode.cpp BWT.c BWTConstruct.c MiscUtilities.c MemManager.c TextConverter.c r250.c QSufSort.c\
# iniparser.c inistrlib.c dictionary.c DNACount.c Timing.c Socket.c HSP.c HSPstatistic.c karlin.c
#decode_LDADD = libz.a
#reverse_SOURCES = reverse.cpp 
#copy:
#	cp bwtformatdb ../bin
#	cp reverse ../bin
#	cp batman ../bin
#	cp decode ../bin

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
