#!/usr/bin/env python
import os
import sys, getopt
import shutil 

##alignment
threads = 6
mismatches = 2
genome_index = ""
input_prefix = ""
input_prefix1 = ""
input_prefix2 = ""
pairedend=False
output_prefix = "None"

##calmeth
Qual = 10
redup = 0
region = 1000
##calmeth and methyGff
coverage = 5
binCover = 3
chromstep = 50000

##methyGff
step = 0.025
distance = 2000
gfffile = "None"
bedfile = "None"

##mode
mode = "pipel"

abspath = ""

def usage():
    print "\nBatMeth2 [mode] [paramaters]"
    print "mode:  build_index, pipel, align, calmeth, annoation, methyPlot, batDMR, visul2sample, mkreport"
    print "\n[build_index]"
    print "    Usage: BatMeth2 build_index genomefile. (must run this step first)"

    print "\n[pipel (Contains: align, calmeth, annoation, methyPlot, mkreport)]"
    print "    [main paramaters]"
    print "    -o    Name of output file prefix"
    print "    [alignment paramaters]"
    print "    -i    Name of input file, if paired-end. please use -1, -2"
    print "    -1    Name of input file left end, if single-end. please use -i"
    print "    -2    Name of input file left end"
    print "    -g    Name of the genome mapped against"
    print "    -n    maximum mismatches allowed due to seq. errors"
    print "    -p <interger>    Launch <integer> threads"
    print "    [calmeth paramaters]"
    print "    --Qual      caculate the methratio while read QulityScore >= Q. default:10"
    print "    --redup     REMOVE_DUP"
    print "    --region    Bins for DMR caculate , default 1000bp ."
    print "    [calmeth and annoation paramaters]"
    print "    --coverage    >= <INT> coverage. default:5"
    print "    --binCover    >= <INT> nCs per region. default:3"
    print "    --chromstep   Chrosome using an overlapping sliding window of 100000bp at a step of 50000bp. default step: 50000(bp)"
    print "    [annoation paramaters]"
    print "    --gtf/--bed    Gtf or gff file / bed file"
    print "    --distance    DNA methylation level distributions in body and <INT>-bp flanking sequences. The distance of upstream and downstream. default:2000"
    print "    --step    Gene body and their flanking sequences using an overlapping sliding window of 5% of the sequence length at a step of 2.5% of the sequence length. So default step: 0.025 (2.5%)"
    print "    [mkreport paramaters]"
    print "    make a html report."

    print "\n[align paramaters:]"
    print "    see the details in 'BatMeth2 align'"
    print "\n[calmeth paramaters:]"
    print "    see the details in 'BatMeth2 calmeth'"
    print "\n[annotion paramaters:]"
    print "    see the details in 'BatMeth2 annoation'"
    print "\n[methyPlot paramaters:]"
    print "    see the details in 'BatMeth2 methyPlot'"
    print "\n[batDMR paramaters:]"
    print "    see the details in 'BatMeth2 batDMR'"
    print "\n[visul2sample paramaters:]"
    print "    see the details in 'BatMeth2 visul2sample'\n"


if len(sys.argv) < 3:
    usage()
    sys.exit()

def detect_paramater():
    opts, args = getopt.getopt(sys.argv[2:], "hi:1:2:o:n:g:p:", ["gtf", "bed", "coverage", "binCover", 
        "chromstep", "step", "distance", "Qual", "region"])
    global input_prefix, input_prefix1, input_prefix2, output_prefix, genome_index, threads, mismatches, region, Qual
    for op, value in opts:
        if op == "-i":
            input_prefix = value
        if op == "-1":
            input_prefix1 = value
        if op == "-2":
            input_prefix2 = value
            pairedend=True
        elif op == "-o":
            output_prefix = value
        elif op == "g":
            genome_index = value
        elif op == "p":
            threads = value
        elif op == "n":
            mismatches = value
        elif op == "gtf":
            gfffile = value
        elif op == "bed":
            bedfile = value
        elif op == "coverage":
            coverage = value
        elif op == "binCover":
            binCover = value
        elif op == "chromstep":
            chromstep = value
        elif op == "step":
            step = value
        elif op == "distance":
            distance = value
        elif op == "Qual":
            Qual = value
        elif op == "region":
            region = value
        elif op == "-h":
            usage()
            sys.exit()

mode = sys.argv[1]

if mode == "pipel":
    detect_paramater()

path1 = os.path.dirname(__file__)
abspath = os.path.abspath(path1) + "/"
##mkdir
def mkdir(path):
    # remove header ' '
    path=path.strip()
    # remove "\"
    #path=path.rstrip("/")
    isExists=os.path.exists(path)

    if not isExists:
        os.makedirs(path)  
        print path+' workdir done.'
        return True
    else:
        print path+' is exits.'
        return False

def copydir(olddir, newdir):
    olddir=olddir.strip()
    newdir=newdir.strip()
    isExists=os.path.exists(newdir)
    if not isExists:
        shutil.copytree(oldreportdir,newdir)
        print newdir+' workdir done.'
        return True
    else:
        print newdir+' is exits, delete.'
        shutil.rmtree(newdir)
        shutil.copytree(oldreportdir,newdir)
        print newdir+' workdir done.'
        return True

oldreportdir = abspath + "/../BatMeth2-Report"
###paramater file
workdir = os.getcwd()
mkpath= workdir + "/batmeth2_report_" + output_prefix
#mkdir(mkpath)
copydir(oldreportdir, mkpath)

fparamater = mkpath + "/images/Paramater.txt"
Fparamater = open(fparamater, "w")

alignmode = "Single-end"
infiles = input_prefix
if pairedend:
    alignmode = "Paired-end"
    infiles = input_prefix1 + ", " + input_prefix2

Sparamater = "Program\tBatMeth2.v1\nWorkdir " + workdir + "\nAligner\tBatMeth2-align\nGenome\t" + genome_index + "\nAnnotation\t" + gfffile + "/" + bedfile + "\nOutput-prefix\t"+ output_prefix + "\nInput\t"+ infiles +  "\nAlignment-Mode\t" + alignmode

Fparamater.write(Sparamater)
Fparamater.close()
##paramater2
fparamater2 = mkpath + "/images/Paramater2.txt"
Fparamater2 = open(fparamater2, "w")
Sparamater2 = "Paramater\tValue\nThreads\t" + str(threads) + "\nCalmeth\tparamaters\n" + "Quality_Score\t" + str(Qual) + "\nredup\t1\n" + "meth region length\t" + str(region) +  "\ncalmeth and methyGff\tparamaters\n" +  "Coverage\t" + str(coverage) + "\nbinCoverage\t" + str(binCover) + "\nchromStep\t" + str(chromstep) + "\nmethyGff\tParamaters\n" + "Gene bins step\t" + str(step) + "\nDistance of upstream and downstream\t"+ str(distance)

Fparamater2.write(Sparamater2)
Fparamater2.close()

##for i in range(1, len(sys.argv)):
##  print sys.argv[i]

def runprogram(cmd):
    print cmd
    error = os.system(cmd)
    if error != 0:
        print "program %s error!"%cmd
        sys.exit()

def calmeth(genome_index, mismatches, inputf, output_prefix, threads):
    if genome_index == "":
        print "Please use -g pramater to defined the genome index location."
        sys.exit()
    if methratio == "":
        print "Must have methratio file (-m paramater)."
        sys.exit()
    if inputf == "":
        print "Must have input sam file (-i paramater)."
        sys.exit()
    cmd = abspath + "/splitSam" + " -g " + genome_index + " -n " + str(mismatches) + " -i " + inputf + " -m " + output_prefix  + " -p " + str(threads)
    if chromstep != 50000:
        cmd = cmd + " -s " + chromstep
    elif coverage != 5:
        cmd = cmd + " -C " + coverage
    elif binCover != 3:
        cmd = cmd + " -nC " + binCover
    elif Qual != 10:
        cmd = cmd + " -Q " + Qual
    elif region != 1000:
        cmd = cmd + " -R " + region
    runprogram(cmd)
    return

def build_index(genome_index):
    if genome_index == "":
        print "Must have genome file."
        sys.exit()
    cmd = abspath + "/build_all " + genome
    runprogram(cmd)

def alignmentSingle():
    if (genome_index == "") or (input_prefix == "") or (output_prefix == ""):
        print "Please check the pramater."
        runprogram("BatMeth2")
        sys.exit()
    cmd = abspath + "/batmeth2-align" + " -g " + genome_index + " -p " + str(threads) + " -n " + str(mismatches) + " -i " + input_prefix + " -o " + output_prefix
    runprogram(cmd)

def alignmentPaired():
    if (genome_index == "") or (input_prefix1 == "") or (output_prefix == "") or (input_prefix2 == ""):
        print "Please check the pramater."
        runprogram("BatMeth2")
        sys.exit()
    cmd = abspath + "/batmeth2-align" + " -g " + genome_index + " -p " + str(threads) + " -n " + str(mismatches) + " -i " + input_prefix1 + "-i " + input_prefix2 + " -o " + output_prefix
    runprogram(cmd)

def annoation():
    if gfffile != "None":
        cmd = "methyGff" + " -o " + output_prefix + " -G " + genome_index + " -g " + gfffile + " -m " + methratio + " -B -P --TSS --TTS --GENE"
    elif bedfile != "None":
        cmd = "methyGff" + " -o " + output_prefix + " -G " + genome_index + " -b " + bedfile + " -m " + methratio + " -B -P --TSS --TTS --GENE"
    elif step != 0.025:
        cmd = cmd + " -s " + step
    elif chromstep != 50000:
        cmd = cmd + " -S " + chromstep
    elif coverage != 5:
        cmd = cmd + " -C " + coverage
    elif binCover != 3:
        cmd = cmd + " -nC " + binCover
    elif distance != 2000:
        cmd = cmd + " -d " + distance
    runprogram(cmd)

##methylation data visulization
def visulize():
    path1 = os.path.dirname(__file__)
    abspath = os.path.abspath(path1)

###get filenames contain outprefix
def IsSubString(SubStrList,Str):
    flag=True
    for substr in SubStrList: 
        if not(substr in Str): 
            flag=False
    return flag 
#~ #---------------------------------------------------------------------- 
def GetFileList(FindPath,FlagStr=[],containlocation=False):  
    FileList=[] 
    FileNames=os.listdir(FindPath) 
    if (len(FileNames)>0): 
        for fn in FileNames: 
            if (len(FlagStr)>0): 
            #return file names contain outprefix
                if (IsSubString(FlagStr,fn)):
                    if containlocation:
                        fullfilename=os.path.join(FindPath,fn) 
                        FileList.append(fullfilename)
                    else:
                        FileList.append(fn)
            else: 
            #otherwise return all files 
                if containlocation:
                    fullfilename=os.path.join(FindPath,fn)
                    FileList.append(fullfilename) 
                else:
                    FileList.append(fn)
    #sort file names
    if (len(FileList)>0): 
        FileList.sort() 
    return FileList

def printoutputfiles():
    FileList = []
    SubStrList = [output_prefix]
    containlocation = False
    FileList = GetFileList(workdir, SubStrList, containlocation)
    fouts = mkpath + "/images/outfiles.txt"
    Fouts = open(fouts, "w")
    file = "File name\tDirectory\n"
    Fouts.write(file)
    for file in FileList:
        file = file + "\t" + workdir + "\n" 
        Fouts.write(file)
    path = mkpath + "/images/"
    FileList = GetFileList(path, ["png"], containlocation)
    for file in FileList:
        file = file + "\t" + path + "\n" 
        Fouts.write(file)
    FileList = GetFileList(path, ["txt"], containlocation)
    for file in FileList:
        file = file + "\t" + path + "\n" 
        Fouts.write(file)

    FileList = GetFileList(mkpath, ["html"], containlocation)
    for file in FileList:
        file = file + "\t" + mkpath + "\n" 
        Fouts.write(file)
    Fouts.close()

def movepng():
    FileList = []
    containlocation = False
    FileList = GetFileList(workdir, [output_prefix, "png"], containlocation)
    for file in FileList:
        oldpost = workdir + "/" + file
        newpost = mkpath + "/images/" + file.replace(output_prefix + ".",'')
        shutil.move(oldpost, newpost)

def doc2html():
    FileList = []
    containlocation = False
    path = mkpath + "/images/"
    FileList = GetFileList(path, "txt", containlocation)
    for file in FileList:
        print "convert " , file, " to html."
        cmd = abspath + doc2html.r + " " + workdir + " " + output_prefix + " " + file


def mkreport():
    alignsummarycmd = "samtools flagstat " + align_result + " | tail -13 | sed 's/ /_/' | sed 's/ /_/' | sed 's/ /\\t/' | sed 's/_/ /g' > " + mkpath + "/images/alignresults.txt"
    methratioLogfile = output_prefix + ".log.txt"
    newlogfile = mkpath + "/images/methratio.txt"
    shutil.copyfile(methratioLogfile,newlogfile) 
    mvpng()
    printoutputfiles()
    doc2html()

## whole pipeline for DNA methylation analysis. Contains alignment, calute meth level, DNA methylation annatation
## on gff file or bed region, DNA methylation visulization. Differentail analysis use diffmeth function.
def runpipe():
    align_result = output_prefix + ".sam"
    if pairedend:
        alignmentPaired()
    else:
        alignmentSingle()
    alignsummarycmd = "samtools flagstat " + align_result + " | tail -13 | sed 's/ /_/' | sed 's/ /_/' | sed 's/ /\\t/' | sed 's/_/ /g' > " + mkpath + "/images/alignresults.txt"
    runprogram(alignsummarycmd)
    calmeth(genome_index, mismatches, align_result, output_prefix, threads)
    annoation()
    methratioLogfile = output_prefix + ".log.txt"
    newlogfile = mkpath + "/images/methratio.txt"
    shutil.copyfile(methratioLogfile,newlogfile) 
    methyPlot()
    mvpng()
    printoutputfiles()
    doc2html()

def methyPlot():
    ##
    cmd = "methyPlot {output_prefix}.methBins.txt {output_prefix}.chrosome.methy.distri.pdf {step} {output_prefix}.Methylevel.1.txt {output_prefix}.methlevel.pdf {output_prefix}.AverMethylevel.1.txt {output_prefix}.elements.pdf"
    cmd = cmd.format(**locals())
    runprogram(cmd)
    path1 = os.path.dirname(__file__) 
    abspath = os.path.abspath(path1)
    cmd = "Rscript {abspath}/density_plot_with_methyl_oneSample_oneGff.r {output_prefix}.methBins.txt {output_prefix}.annoDensity.1.txt {output_prefix}.density.pdf {output_prefix} "
    cmd = cmd.format(**locals())
    runprogram(cmd)

def visul2sample():
    cmd = "GeneMethHeatmap {sample1_prefix} {sample2_prefix} {CG} {CHG} {CHG}"

#"pipel", "index", "align", "calmeth", "anno", "visul", "diffmeth", "visuldiff", DManno"
command = sys.argv[1]
if command == "build_index":
    build_index(genome_index)
elif command == "pipel":
    runpipe()
elif command == "align":
    cmd = abspath + "/batmeth2-align "
    runprogram(cmd)
elif command == "calmeth":
    cmd = abspath + "/splitSam "
    runprogram(cmd)
elif command == "anno":
    cmd = abspath + "/methyGff "
    runprogram(cmd)
elif command == "visul":
    cmd = abspath + "/methyPlot" 
    runprogram(cmd)
elif command == "diffmeth":
    cmd = abspath + "/batDMR" 
    runprogram(cmd)
elif command == "DManno":
    cmd = abspath + "/DMCannotationPlot" 
    runprogram(cmd)
elif command == "mkreport":
    mkreport()
else:
    print "can not detect any command!"
    usage()
    sys.exit()
    


